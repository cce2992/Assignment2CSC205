

import javax.swing.*;

import java.awt.*;
import java.awt.event.*;
public class IEEE754GUI extends JFrame{
	private static final long serialVersionUID = 1L;
	private JTextField decimalTOSingle;
	private JTextField decimalTODouble;
	private JTextField singleTODecimal;
	private JTextField doubleTODecimal;









	private FlowLayout layout;
	private JPanel panels;
	private  JLabel label;
	private JTextArea outputData;
	private	Container contentpane;

	private JButton convertdecimalTOSingle;
	private JButton convertdecimalTODouble;
	private JButton convertsingleTODecimal;
	private JButton convertdoubleTODecimal;
	public IEEE754GUI(){
		super("IEEE754 GUI");
		init();
		pack();
		setSize(1000,1000);}

		private void init() {
			 contentpane = getContentPane();
			 contentpane.setBackground(Color.GREEN);
			 layout = new FlowLayout();
			 contentpane.setLayout(layout);
			 EventHandler event = new EventHandler	 ();
			  panels = new JPanel();
			    label = new  JLabel   ("convert decimal to single:");
			  panels.add(label);
			  decimalTOSingle = new JTextField(25);
			  panels.add(decimalTOSingle);
			  convertdecimalTOSingle = new JButton ("decimal to Single");
			  convertdecimalTOSingle.addActionListener(event);
			  panels.add(convertdecimalTOSingle);

			  contentpane.add(panels);

			  panels = new JPanel();
			  label = new  JLabel   ("convert decimal to Double:");
			  panels.add(label);
			  decimalTODouble = new JTextField(25);
			  panels.add(decimalTODouble);
			  convertdecimalTODouble = new JButton ("decimal to Double");
			  convertdecimalTODouble.addActionListener(event);
			  panels.add(convertdecimalTODouble);

			  contentpane.add(panels);
			  panels = new JPanel();
			  label = new  JLabel   ("convert single to decimal :");
			  panels.add(label);
			  singleTODecimal = new JTextField(25);
			  panels.add(singleTODecimal);
			  convertsingleTODecimal = new JButton ("Single to decimal");
			  panels.add(convertsingleTODecimal);
			  convertsingleTODecimal.addActionListener(event);
			  contentpane.add(panels);
			  panels = new JPanel();
			  label = new  JLabel   ("convert  Double to  decimal:");
			  panels.add(label);
			  doubleTODecimal = new JTextField(50);
			  panels.add(doubleTODecimal);
			  convertdoubleTODecimal = new JButton ("double to Decimal");
			  panels.add(convertdoubleTODecimal);
			  convertdoubleTODecimal.addActionListener(event);
			  contentpane.add(panels);


	}
		private class EventHandler implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {

				contentpane = getContentPane();
				if(e.getActionCommand().equals("decimal to Single"))//user clicks on decimal to single button

				{

					JOptionPane.showMessageDialog(null,String.format("%32s",


				IEEE754GUI.decimalTo32Binary(Float.parseFloat(decimalTOSingle.getText()))).replace(' ', '0'));
					}
				if(e.getActionCommand().equals("decimal to Double"))//user clicks on decimal to Double button

				{JOptionPane.showMessageDialog(null,String.format(" %64s",


						IEEE754GUI.decimalTo64Binary(Double.parseDouble(decimalTODouble.getText()))).replace(' ', '0'));


				}
				if(e.getActionCommand().equals("Single to decimal"))//user clicks on Single to decimal button

				{
					JOptionPane.showMessageDialog(null,"The decimal value for this 32 binary String number:\n"+IEEE754GUI.binary32ToDecimal(singleTODecimal.getText()));

				}
				if(e.getActionCommand().equals("double to Decimal"))//user clicks on double to Decimal button

				{
					JOptionPane.showMessageDialog(null,"The decimal value for this 64 binary String number:\n"+IEEE754GUI.binary64ToDecimal(doubleTODecimal.getText()));

				}}
			}
		public static String decimalTo64Binary(double dec)
		{
			return Long.toBinaryString(Double.doubleToLongBits(dec));
		}

		public static double binary64ToDecimal(String binary64)
		{
			char first = binary64.charAt(0);
			if (first == '1')
			{
				String swap = binary64.replaceFirst("1", "0");
				double plus = Double.longBitsToDouble(Long.parseLong(swap, 2));

				return plus * -1;
			}

			else
				return Double.longBitsToDouble(Long.parseLong(binary64, 2));
		}

		/**
		 *
		 * @param dec
		 * @return
		 */
		public static String decimalTo32Binary(float dec)
		{
			return Integer.toBinaryString(Float.floatToIntBits(dec));
		}

		/**
		 *
		 * @param dec
		 * @return
		 */
		public static float binary32ToDecimal(String binary32)
		{
			//changes first character in string to "0" if it is "1"
			char first = binary32.charAt(0);
			if (first == '1')
			{
				String swap = binary32.replaceFirst("1", "0");
				float plus = Float.intBitsToFloat(Integer.parseInt(swap, 2));
				//makes it negative
				return plus * -1;
			}
			else
				return Float.intBitsToFloat(Integer.parseInt(binary32, 2));
		}
}

